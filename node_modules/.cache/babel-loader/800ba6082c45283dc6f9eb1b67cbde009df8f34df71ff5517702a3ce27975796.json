{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bnikh\\\\Desktop\\\\Ashish NBAD Project\\\\PersonalBudget-Frontend\\\\src\\\\DashboardPage\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DashboardPage() {\n  _s();\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('jwt');\n  const months = ['Select Month', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  function decodingJWT(token) {\n    try {\n      const base64payload = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64payload).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      return {};\n    }\n  }\n  useEffect(() => {\n    const existingToken = localStorage.getItem('jwt');\n    if (existingToken) {\n      const decodedToken = decodingJWT(existingToken);\n      const issuedAt = decodedToken.iat;\n      const expiresIn = decodedToken.exp - issuedAt;\n      const currentTimeInSeconds = Math.floor(Date.now() / 1000);\n      const warningTime = expiresIn - 20;\n      const warningTimeout = setTimeout(() => {\n        const userResponse = window.confirm('Your session will expire in 20 seconds. Do you want to continue?');\n        if (!userResponse || currentTimeInSeconds - issuedAt > expiresIn) {\n          localStorage.removeItem('jwt');\n          localStorage.removeItem('username');\n          window.location.reload();\n        }\n      }, warningTime * 1000);\n      return () => clearTimeout(warningTimeout);\n    }\n  }, []);\n  const [selectedMonth, setSelectedMonth] = useState('Select Month');\n  const [selectedMonth1, setSelectedMonth1] = useState('Select Month');\n  const [selectedMonth2, setSelectedMonth2] = useState('Select Month');\n  const [selectedMonth3, setSelectedMonth3] = useState('Select Month'); // Add state for selected month of chart3\n  const [dataSource, setDataSource] = useState({\n    datasets: [{\n      data: [],\n      backgroundColor: [],\n      expense: [],\n      month: []\n    }],\n    labels: []\n  });\n  const [totalBudget, setTotalBudget] = useState(0);\n  const [totalExpense, setTotalExpense] = useState(0);\n  const createDataTable = () => {\n    // Existing code for creating data table\n  };\n  const drawDonutChart = () => {\n    const ctx = document.getElementById('chart1').getContext('2d');\n    let existingChart = Chart.getChart(ctx);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n    const filteredExpenses = dataSource.datasets[0].expense.filter((expense, index) => dataSource.datasets[0].month[index] === selectedMonth1);\n    const filteredLabels = dataSource.labels.filter((_, index) => dataSource.datasets[0].month[index] === selectedMonth1);\n    const filteredColors = dataSource.datasets[0].backgroundColor.filter((_, index) => dataSource.datasets[0].month[index] === selectedMonth1);\n    if (filteredLabels.length === 0) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('No data available for this month', ctx.canvas.width / 2, ctx.canvas.height / 2);\n    } else {\n      existingChart = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: filteredLabels,\n          datasets: [{\n            label: 'Expenses',\n            data: filteredExpenses,\n            backgroundColor: filteredColors,\n            borderWidth: 1\n          }]\n        }\n      });\n    }\n  };\n  const drawBarChart2 = () => {\n    const ctx = document.getElementById('chart2').getContext('2d');\n    let existingChart = Chart.getChart(ctx);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n    const filteredExpenses = [];\n    const filteredBudget = [];\n    const filteredLabels = [];\n    const filteredColors = [];\n    dataSource.labels.forEach((label, index) => {\n      if (dataSource.datasets[0].month[index] === selectedMonth2) {\n        filteredLabels.push(label);\n        filteredExpenses.push(dataSource.datasets[0].expense[index]);\n        filteredBudget.push(dataSource.datasets[0].data[index]);\n        filteredColors.push(dataSource.datasets[0].backgroundColor[index]);\n      }\n    });\n    if (filteredLabels.length === 0) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('No data available for this month', ctx.canvas.width / 2, ctx.canvas.height / 2);\n    } else {\n      existingChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: filteredLabels,\n          datasets: [{\n            label: 'Budget',\n            data: filteredBudget,\n            backgroundColor: filteredColors,\n            borderColor: filteredColors,\n            borderWidth: 1\n          }, {\n            label: 'Expenses',\n            data: filteredExpenses,\n            backgroundColor: filteredColors,\n            borderColor: filteredColors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  };\n  console.log('totalBudget::', totalBudget);\n  console.log('totalExpense::', totalExpense);\n  const drawTotalChart = () => {\n    const ctx = document.getElementById('chart3').getContext('2d');\n    let existingChart = Chart.getChart(ctx);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n\n    // Initialize objects to store total budget and expense for each month\n    const totalBudgetByMonth = {};\n    const totalExpenseByMonth = {};\n\n    // Iterate over the data points and calculate total budget and expense for each month\n    dataSource.labels.forEach((label, index) => {\n      const month = dataSource.datasets[0].month[index];\n      const budget = dataSource.datasets[0].data[index];\n      const expense = dataSource.datasets[0].expense[index];\n\n      // If the month does not exist in the objects, initialize it\n      if (!totalBudgetByMonth[month]) {\n        totalBudgetByMonth[month] = 0;\n        totalExpenseByMonth[month] = 0;\n      }\n\n      // Add budget and expense values to the corresponding month\n      totalBudgetByMonth[month] += budget;\n      totalExpenseByMonth[month] += expense;\n    });\n\n    // Convert the objects to arrays to use with Chart.js\n    const months = Object.keys(totalBudgetByMonth);\n    const totalBudgetData = months.map(month => totalBudgetByMonth[month]);\n    const totalExpenseData = months.map(month => totalExpenseByMonth[month]);\n    existingChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: months.map(month => months[parseInt(month)]),\n        // Convert month index to name\n        datasets: [{\n          label: 'Total Budget',\n          data: totalBudgetData,\n          backgroundColor: '#36a2eb',\n          borderWidth: 1\n        }, {\n          label: 'Total Expense',\n          data: totalExpenseData,\n          backgroundColor: '#ff6384',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  const getBudget = () => {\n    axios.get(`http://localhost:3000/api/budget/q`, {\n      //${username}\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(function (res) {\n      console.log(res.data);\n      let budgetTotal = 0;\n      let expenseTotal = 0;\n      for (var i = 0; i < res.data.length; i++) {\n        budgetTotal += res.data[i].budget;\n        expenseTotal += res.data[i].expense;\n        dataSource.datasets[0].data[i] = res.data[i].budget;\n        dataSource.labels[i] = res.data[i].title;\n        dataSource.datasets[0].backgroundColor[i] = res.data[i].color;\n        dataSource.datasets[0].expense[i] = res.data[i].expense;\n        dataSource.datasets[0].month[i] = res.data[i].month;\n      }\n      setTotalBudget(budgetTotal);\n      setTotalExpense(expenseTotal);\n      console.log('dataSource:::', dataSource);\n      drawDonutChart();\n      createDataTable();\n      drawTotalChart(); // Draw the total chart after getting the data\n    }).catch(function (error) {\n      console.error('Error fetching budget data:', error);\n    });\n  };\n  useEffect(() => {\n    getBudget();\n  }, []);\n  useEffect(() => {\n    drawDonutChart(); // Redraw chart when selectedMonth1 changes\n  }, [selectedMonth1]);\n  useEffect(() => {\n    drawDonutChart(); // Redraw chart when dataSource changes\n  }, [dataSource]);\n  useEffect(() => {\n    drawBarChart2(); // Fetch initial data for chart2 and draw the chart\n  }, [selectedMonth2, dataSource]); // Add dataSource as a dependency\n\n  useEffect(() => {\n    drawBarChart2(); // Refetch data and redraw chart2 when selectedMonth2 changes\n  }, [selectedMonth2]);\n  const handleMonthChange = event => {\n    const newSelectedMonth = event.target.value;\n    setSelectedMonth(newSelectedMonth);\n    setSelectedMonth1(newSelectedMonth); // Update selectedMonth1 with the new value\n    setSelectedMonth2(newSelectedMonth); // Update selectedMonth2 with the new value\n    setSelectedMonth3(newSelectedMonth); // Update selectedMonth3 with the new value\n  };\n  const handleChange1 = event => {\n    setSelectedMonth1(event.target.value);\n    drawDonutChart(); // Redraw chart when selectedMonth1 changes\n  };\n  const handleChange2 = event => {\n    setSelectedMonth2(event.target.value);\n    // Redraw chart2 only when the selected month changes, not on initial render\n  };\n  const handleChange3 = event => {\n    setSelectedMonth3(event.target.value);\n    // Redraw chart3 only when the selected month changes, not on initial render\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      padding: '30px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-corner-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"dashboard-head\",\n          children: [\"WELCOME TO \", username, \"'s DASHBOARD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          className: \"logout-link\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"month-dropdown\",\n          children: \"Select a month:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"month-dropdown\",\n            value: selectedMonth,\n            onChange: handleMonthChange,\n            children: months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: month,\n              children: month\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-arrow\",\n            children: \"\\u25BC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"charts\",\n        children: [/*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"chart chart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Donut Chart for Expenses in \", selectedMonth1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select a month:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedMonth1,\n              onChange: handleChange1,\n              \"aria-label\": \"Select a month\",\n              children: months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: month,\n                children: month\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n              id: \"chart1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"chart chart2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Bar Chart for Budget and Expenses in \", selectedMonth2]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select a month:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedMonth2,\n              onChange: handleChange2,\n              \"aria-label\": \"Select a month\",\n              children: months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: month,\n                children: month\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n              id: \"chart2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"chart chart3\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Total Budget and Total Expenses in \", selectedMonth3]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select a month:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedMonth3,\n              onChange: handleChange3,\n              \"aria-label\": \"Select a month\",\n              children: [\" \", months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: month,\n                children: month\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n              id: \"chart3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"table-container\",\n        className: \"data-table-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n}\n_s(DashboardPage, \"nUGwn8qPxy3WfA7ftnecfLXD1+Y=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","axios","Chart","jsxDEV","_jsxDEV","DashboardPage","_s","username","localStorage","getItem","token","months","decodingJWT","base64payload","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","existingToken","decodedToken","issuedAt","iat","expiresIn","exp","currentTimeInSeconds","Math","floor","Date","now","warningTime","warningTimeout","setTimeout","userResponse","window","confirm","removeItem","location","reload","clearTimeout","selectedMonth","setSelectedMonth","selectedMonth1","setSelectedMonth1","selectedMonth2","setSelectedMonth2","selectedMonth3","setSelectedMonth3","dataSource","setDataSource","datasets","data","backgroundColor","expense","month","labels","totalBudget","setTotalBudget","totalExpense","setTotalExpense","createDataTable","drawDonutChart","ctx","document","getElementById","getContext","existingChart","getChart","destroy","filteredExpenses","filter","index","filteredLabels","_","filteredColors","length","clearRect","canvas","width","height","font","textAlign","fillText","type","label","borderWidth","drawBarChart2","filteredBudget","forEach","push","borderColor","options","scales","y","beginAtZero","console","log","drawTotalChart","totalBudgetByMonth","totalExpenseByMonth","budget","Object","keys","totalBudgetData","totalExpenseData","parseInt","getBudget","get","headers","Authorization","then","res","budgetTotal","expenseTotal","i","title","color","catch","handleMonthChange","event","newSelectedMonth","target","value","handleChange1","handleChange2","handleChange3","style","position","padding","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","htmlFor","id","onChange","_c","$RefreshReg$"],"sources":["C:/Users/bnikh/Desktop/Ashish NBAD Project/PersonalBudget-Frontend/src/DashboardPage/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nfunction DashboardPage() {\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('jwt');\n  const months = [\n    'Select Month', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December',\n  ];\n\n  function decodingJWT(token) {\n    try {\n      const base64payload = (token.split('.')[1]).replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64payload).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      return {};\n    }\n  }\n\n  useEffect(() => {\n    const existingToken = localStorage.getItem('jwt');\n    if (existingToken) {\n      const decodedToken = decodingJWT(existingToken);\n      const issuedAt = decodedToken.iat; \n      const expiresIn = decodedToken.exp - issuedAt;\n      const currentTimeInSeconds = Math.floor(Date.now() / 1000);\n      const warningTime = expiresIn - 20;\n      const warningTimeout = setTimeout(() => {\n        const userResponse = window.confirm('Your session will expire in 20 seconds. Do you want to continue?');\n\n        if (!userResponse || currentTimeInSeconds-issuedAt>expiresIn) {\n          localStorage.removeItem('jwt');\n          localStorage.removeItem('username');\n          window.location.reload();\n        }\n      }, warningTime * 1000);\n\n      return () => clearTimeout(warningTimeout);\n    }\n  }, []);\n\n  const [selectedMonth, setSelectedMonth] = useState('Select Month');\n  const [selectedMonth1, setSelectedMonth1] = useState('Select Month');\n  const [selectedMonth2, setSelectedMonth2] = useState('Select Month');\n  const [selectedMonth3, setSelectedMonth3] = useState('Select Month'); // Add state for selected month of chart3\n  const [dataSource, setDataSource] = useState({\n    datasets: [\n      {\n        data: [],\n        backgroundColor: [],\n        expense: [],\n        month: [],\n      },\n    ],\n    labels: [],\n  });\n  const [totalBudget, setTotalBudget] = useState(0);\n  const [totalExpense, setTotalExpense] = useState(0);\n\n  const createDataTable = () => {\n    // Existing code for creating data table\n  };\n\n  const drawDonutChart = () => {\n    const ctx = document.getElementById('chart1').getContext('2d');\n    let existingChart = Chart.getChart(ctx);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n\n    const filteredExpenses = dataSource.datasets[0].expense.filter(\n      (expense, index) => dataSource.datasets[0].month[index] === selectedMonth1\n    );\n    const filteredLabels = dataSource.labels.filter(\n      (_, index) => dataSource.datasets[0].month[index] === selectedMonth1\n    );\n    const filteredColors = dataSource.datasets[0].backgroundColor.filter(\n      (_, index) => dataSource.datasets[0].month[index] === selectedMonth1\n    );\n\n    if (filteredLabels.length === 0) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('No data available for this month', ctx.canvas.width / 2, ctx.canvas.height / 2);\n    } else {\n      existingChart = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: filteredLabels,\n          datasets: [\n            {\n              label: 'Expenses',\n              data: filteredExpenses,\n              backgroundColor:filteredColors,\n              borderWidth: 1,\n            },\n          ],\n        },\n      });\n    }\n  };\n\n  const drawBarChart2 = () => {\n    const ctx = document.getElementById('chart2').getContext('2d');\n    let existingChart = Chart.getChart(ctx);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n  \n    const filteredExpenses = [];\n    const filteredBudget = [];\n    const filteredLabels = [];\n    const filteredColors = [];\n   \n    dataSource.labels.forEach((label, index) => {\n      if (dataSource.datasets[0].month[index] === selectedMonth2) {\n        filteredLabels.push(label);\n        filteredExpenses.push(dataSource.datasets[0].expense[index]);\n        filteredBudget.push(dataSource.datasets[0].data[index]);\n        filteredColors.push(dataSource.datasets[0].backgroundColor[index]);\n      }\n    });\n  \n    if (filteredLabels.length === 0) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('No data available for this month', ctx.canvas.width / 2, ctx.canvas.height / 2);\n    } else {\n      existingChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: filteredLabels,\n          datasets: [\n            {\n              label: 'Budget',\n              data: filteredBudget,\n              backgroundColor: filteredColors,\n              borderColor: filteredColors,\n              borderWidth: 1\n            },\n            {\n              label: 'Expenses',\n              data: filteredExpenses,\n              backgroundColor: filteredColors,\n              borderColor: filteredColors,\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  };\nconsole.log('totalBudget::',totalBudget);\nconsole.log('totalExpense::',totalExpense);\nconst drawTotalChart = () => {\n  const ctx = document.getElementById('chart3').getContext('2d');\n  let existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    existingChart.destroy();\n  }\n\n  // Initialize objects to store total budget and expense for each month\n  const totalBudgetByMonth = {};\n  const totalExpenseByMonth = {};\n\n  // Iterate over the data points and calculate total budget and expense for each month\n  dataSource.labels.forEach((label, index) => {\n    const month = dataSource.datasets[0].month[index];\n    const budget = dataSource.datasets[0].data[index];\n    const expense = dataSource.datasets[0].expense[index];\n\n    // If the month does not exist in the objects, initialize it\n    if (!totalBudgetByMonth[month]) {\n      totalBudgetByMonth[month] = 0;\n      totalExpenseByMonth[month] = 0;\n    }\n\n    // Add budget and expense values to the corresponding month\n    totalBudgetByMonth[month] += budget;\n    totalExpenseByMonth[month] += expense;\n  });\n\n  // Convert the objects to arrays to use with Chart.js\n  const months = Object.keys(totalBudgetByMonth);\n  const totalBudgetData = months.map(month => totalBudgetByMonth[month]);\n  const totalExpenseData = months.map(month => totalExpenseByMonth[month]);\n\n  existingChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: months.map(month => months[parseInt(month)]), // Convert month index to name\n      datasets: [\n        {\n          label: 'Total Budget',\n          data: totalBudgetData,\n          backgroundColor: '#36a2eb',\n          borderWidth: 1\n        },\n        {\n          label: 'Total Expense',\n          data: totalExpenseData,\n          backgroundColor: '#ff6384',\n          borderWidth: 1\n        }\n      ]\n    },\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  });\n};\n\n\n  const getBudget = () => {\n    axios\n      .get(`http://localhost:3000/api/budget/q`, { //${username}\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then(function (res) {\n        console.log(res.data);\n        let budgetTotal = 0;\n        let expenseTotal = 0;\n        for (var i = 0; i < res.data.length; i++) {\n          budgetTotal += res.data[i].budget;\n          expenseTotal += res.data[i].expense;\n          dataSource.datasets[0].data[i] = res.data[i].budget;\n          dataSource.labels[i] = res.data[i].title;\n          dataSource.datasets[0].backgroundColor[i] = res.data[i].color;\n          dataSource.datasets[0].expense[i] = res.data[i].expense;\n          dataSource.datasets[0].month[i] = res.data[i].month;\n        }\n        setTotalBudget(budgetTotal);\n        setTotalExpense(expenseTotal);\n        console.log('dataSource:::',dataSource);\n        drawDonutChart();\n        createDataTable();\n        drawTotalChart(); // Draw the total chart after getting the data\n      })\n      .catch(function (error) {\n        console.error('Error fetching budget data:', error);\n      });\n  };\n\n  useEffect(() => {\n    getBudget();\n  }, []);\n\n  useEffect(() => {\n    drawDonutChart(); // Redraw chart when selectedMonth1 changes\n  }, [selectedMonth1]);\n\n  useEffect(() => {\n    drawDonutChart(); // Redraw chart when dataSource changes\n  }, [dataSource]);\n\n  useEffect(() => {\n    drawBarChart2(); // Fetch initial data for chart2 and draw the chart\n  }, [selectedMonth2, dataSource]); // Add dataSource as a dependency\n\n  useEffect(() => {\n    drawBarChart2(); // Refetch data and redraw chart2 when selectedMonth2 changes\n  }, [selectedMonth2]);\n\n  const handleMonthChange = (event) => {\n    const newSelectedMonth = event.target.value;\n    setSelectedMonth(newSelectedMonth);\n    setSelectedMonth1(newSelectedMonth); // Update selectedMonth1 with the new value\n    setSelectedMonth2(newSelectedMonth); // Update selectedMonth2 with the new value\n    setSelectedMonth3(newSelectedMonth); // Update selectedMonth3 with the new value\n  };\n\n  const handleChange1 = (event) => {\n    setSelectedMonth1(event.target.value);\n    drawDonutChart(); // Redraw chart when selectedMonth1 changes\n  };\n\n  const handleChange2 = (event) => {\n    setSelectedMonth2(event.target.value);\n    // Redraw chart2 only when the selected month changes, not on initial render\n  };\n\n  const handleChange3 = (event) => {\n    setSelectedMonth3(event.target.value);\n    // Redraw chart3 only when the selected month changes, not on initial render\n  };\n\n  return (\n    <div style={{ position: 'relative', padding: '30px' }}>\n      <div className=\"dashboard-corner-section\">\n        <div className=\"heading-container\">\n          <h1 className=\"dashboard-head\">WELCOME TO {username}'s DASHBOARD</h1>\n          <Link to=\"/login\" className=\"logout-link\">Logout</Link>\n        </div>\n        <div className='filter-dropdown'>\n          <label htmlFor=\"month-dropdown\">Select a month:</label><br/>\n          <div className=\"custom-dropdown\">\n            <select id=\"month-dropdown\" value={selectedMonth} onChange={handleMonthChange}>\n              {months.map((month, index) => (\n                <option key={index} value={month}>{month}</option>\n              ))}\n            </select>\n            <div className=\"dropdown-arrow\">&#9660;</div>\n          </div>\n        </div>\n        <section className=\"charts\">\n          <article className=\"chart chart1\">\n            <h3>Donut Chart for Expenses in {selectedMonth1}</h3>\n            <label>\n              Select a month:\n              <select value={selectedMonth1} onChange={handleChange1} aria-label=\"Select a month\">\n                {months.map((month, index) => (\n                  <option key={index} value={month}>{month}</option>\n                ))}\n              </select>\n            </label>\n            <div>\n              <canvas id=\"chart1\"></canvas>\n            </div>\n          </article>\n          <article className=\"chart chart2\">\n            <h3>Bar Chart for Budget and Expenses in {selectedMonth2}</h3>\n            <label>\n              Select a month:\n              <select value={selectedMonth2} onChange={handleChange2} aria-label=\"Select a month\">\n                {months.map((month, index) => (\n                  <option key={index} value={month}>{month}</option>\n                ))}\n              </select>\n            </label>\n            <div>\n              <canvas id=\"chart2\"></canvas>\n            </div>\n          </article>\n\n          <article className=\"chart chart3\"> {/* Corrected the class name from chart2 to chart3 */}\n            <h3>Total Budget and Total Expenses in {selectedMonth3}</h3> {/* Updated the month variable */}\n            <label>\n              Select a month:\n              <select value={selectedMonth3} onChange={handleChange3} aria-label=\"Select a month\"> {/* Corrected the value and onChange function */}\n                {months.map((month, index) => (\n                  <option key={index} value={month}>{month}</option>\n                ))}\n              </select>\n            </label>\n            <div>\n              <canvas id=\"chart3\"></canvas>\n            </div>\n          </article>\n\n          \n        </section>\n        <div id=\"table-container\" className=\"data-table-container\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default DashboardPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}